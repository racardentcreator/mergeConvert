function onOpen() {
 const ui = SpreadsheetApp.getUi();
 const menu = ui.createMenu('Aish Gupta');
 menu.addItem('Photo split', 'createNewGoogleDocs')
 menu.addToUi();
}

function getIdFromUrl(url) { return url.match(/[-\w]{27,}/); }
 
function createNewGoogleDocs() {
 
 // Parent folder for all application
 //const applicationsFolder = DriveApp.getFolderById('1svlwyZsS4039Vhqmqgryh3yXQsmUVlEVy1i33QCGgvpaLMz3QpqPU60YDjwgjJBp_KAOoEPF');
 
 const destinationFolder = DriveApp.getFolderById('1YzV3gKdaCOqSKe3DnQPDwHzs2s6F-i_FmTaXICSnAWLInSWyVwA1uuywOjaI5cUH4pEZhCLD')
 
   //Here we store the sheet as a variable
 const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheets()[0];
  //Now we get all of the values as a 2D array
 const rows = sheet.getDataRange().getValues();
  //Start processing each spreadsheet row
 rows.forEach(function(row, index){
   //Here we check if this row is the headers, if so we skip it
   if (index === 0) return;

   var folderIteratorChecker = destinationFolder.getFoldersByName('day ' + row[0].toString()[9]);
   var dateFolder;
   //we check if the club already exists
   if (folderIteratorChecker.hasNext()) {
     dateFolder = folderIteratorChecker.next();
   }else {
     dateFolder = destinationFolder.createFolder('day ' + row[0].toString()[9]);
   }

   //Here we check if a document has already been generated by looking at 'Document Link', if so we skip it
   if (!row[8]) return;
 
   folderIteratorChecker = dateFolder.getFoldersByName(row[1]);
   var applicantFolder;
   //we check if the club already exists
   if (folderIteratorChecker.hasNext()) {
     applicantFolder = folderIteratorChecker.next();
   }else {
     applicantFolder = dateFolder.createFolder(row[1]);
   }
 
   //photo row break apart
   const photos = row[8].toString().split(', ');
   const noOfPhotos = photos.length
   //movement process
   for(var counter = 0; counter < noOfPhotos; counter = counter + 1) {
    try {
      DriveApp.getFileById(
        getIdFromUrl(
          photos[counter]
        )
      ).moveTo(applicantFolder);
    } catch {
      Logger.log(row[0].toString()[9] + row[1]);
    }
    }
   //copy process
 })
 
}
